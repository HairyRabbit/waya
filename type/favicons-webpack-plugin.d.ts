import * as webpack from 'webpack'
import * as HtmlWebpackPlugin from 'html-webpack-plugin'
import * as favicons  from 'favicons'

declare namespace FaviconsWebpackPlugin {
  export interface Options {
    /**
     * Your source logo (required)
     */
    logo: string,
    /**
     * Enable caching and optionally specify the path to store cached data
     * Note: disabling caching may increase build times considerably
     * @default true
     */
    cache?: boolean,
    /**
     * Override the publicPath option usually read from webpack configuration
     * @example '/static'
     */
    publicPath?: string,
    /**
     * The directory to output the assets relative to the webpack output dir.
     * Relative string paths are allowed here ie '../public/static'. If this
     * option is not set, `prefix` is used.
     * @example '/public/static'
     */
    outputPath?: string,
    /** 
     * Prefix path for generated assets
     * @default 'assets/'
     */
    prefix?: string,
    /**
     * Inject html links/metadata (requires html-webpack-plugin).
     * This option accepts arguments of different types:
     *  * boolean
     *    `false`: disables injection
     *    `true`: enables injection if that is not disabled in html-webpack-plugin
     *  * string
     *    `'force'`: enables injection even if that is disabled in html-webpack-plugin
     *  * function
     *    any predicate that takes an instance of html-webpack-plugin and returns either
     *    `true` or `false` to control the injection of html metadata for the html files
     *    generated by this instance.
     * @default true
     */
    inject?: boolean | 'force' | ((plugin: HtmlWebpackPlugin) => boolean),
    /**
     * Favicons configuration options
     * @default {}
     */
    favicons?: favicons.Configuration
    /**
     * Modes allow you to choose a very fast simplified favicon compilation or a production 
     * ready favicon compilation. 
     * 
     * By default this mode is controlled by webpack. 
     * 
     * If the webpack mode is set to development the favicons mode will use light. 
     * 
     * If the webpack mode is set to production the favicons mode will use webapp. 
     * 
     * This behaviour can be adjusted by setting the favicon mode and devMode options.
     * 
     * @default 'light''
     */
    devMode?: 'light' | 'webapp'
    /**
     * Modes allow you to choose a very fast simplified favicon compilation or a production 
     * ready favicon compilation. 
     * 
     * By default this mode is controlled by webpack. 
     * 
     * If the webpack mode is set to development the favicons mode will use light. 
     * 
     * If the webpack mode is set to production the favicons mode will use webapp. 
     * 
     * This behaviour can be adjusted by setting the favicon mode and devMode options.
     * @default 'webapp''
     */
    mode?: 'webapp' | 'light'
  }
}

declare class FaviconsWebpackPlugin extends Plugin {
  constructor(options: string | FaviconsWebpackPlugin.Options)
  apply(compiler: webpack.Compiler): any
}

export = FaviconsWebpackPlugin